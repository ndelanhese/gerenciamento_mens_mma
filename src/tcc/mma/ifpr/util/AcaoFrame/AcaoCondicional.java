/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tcc.mma.ifpr.util.AcaoFrame;

import static java.awt.Frame.NORMAL;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import tcc.mma.ifpr.bean.Cliente;
import tcc.mma.ifpr.bean.Condicional;
import tcc.mma.ifpr.bean.Funcionario;
import tcc.mma.ifpr.bean.Mercadoria;
import tcc.mma.ifpr.bean.MercadoriaVenda;
import tcc.mma.ifpr.dao.ClienteDAO;
import tcc.mma.ifpr.dao.CondicionalDAO;
import tcc.mma.ifpr.dao.FuncionarioDAO;
import tcc.mma.ifpr.dao.MercadoriaDAO;
import tcc.mma.ifpr.util.FabricaDeConexoes;
import tcc.mma.ifpr.util.Main;
import tcc.mma.ifpr.util.TableModel.TableModelCliente;
import tcc.mma.ifpr.util.TableModel.TableModelMercadoriaVenda;

/**
 *
 * @author nnath
 */
public class AcaoCondicional extends javax.swing.JInternalFrame {

    /**
     * Creates new form AcaoFrameCondicional
     */
    public AcaoCondicional() {
        initComponents();

        pegarFun();
        pegarData();
    }

    int a = 0;
    int b = 0;
    int d = 0;

    int idMercadoria = 0;

    public void prepararMerc(int id) {

        try {

            Connection con = FabricaDeConexoes.criarConexaoParaMySQL();
            MercadoriaDAO daoMercadoria = new MercadoriaDAO(con);

            Mercadoria mercadoria = daoMercadoria.retrieve(id);

            txtMercadoria.setText(mercadoria.getDescricao());
            txtQuantidade.setText("1");
            jbMaisMercadoria.setEnabled(true);
            jbMenosMercadoria.setEnabled(true);
            jbAdicionarMercadoriTabela.setEnabled(true);
            idMercadoria = mercadoria.getId();
        } catch (Exception e) {
        }

    }

    public String fazerVetorMercadoria() {

        int tamanhoTabela = jtMercadoria.getRowCount();

        String mercadoria[] = new String[tamanhoTabela];

        TableModelMercadoriaVenda tbMercadoria = (TableModelMercadoriaVenda) jtMercadoria.getModel();

        for (int i = tamanhoTabela - 1; i >= 0; i--) {
            MercadoriaVenda mercadoriaVenda = tbMercadoria.getMercadoria(i);

            if (i != 0) {
                mercadoria[i] = mercadoriaVenda.getId() + ", ";
            } else {
                mercadoria[i] = mercadoriaVenda.getId() + ".";
            }

        }
        String mercadoriaString = "";
        for (int i = mercadoria.length - 1; i >= 0; i--) {
            mercadoriaString = mercadoriaString + mercadoria[i];
        }

        return mercadoriaString;
    }

    public String fazerVetorQuantidade() {
        int tamanhoTabela = jtMercadoria.getRowCount();

        String mercadoriaQuantidade[] = new String[tamanhoTabela];

        TableModelMercadoriaVenda tbMercadoria = (TableModelMercadoriaVenda) jtMercadoria.getModel();

        for (int i = tamanhoTabela - 1; i >= 0; i--) {
            MercadoriaVenda mercadoriaVenda = tbMercadoria.getMercadoria(i);

            if (i != 0) {
                mercadoriaQuantidade[i] = mercadoriaVenda.getQuantidade() + ", ";
            } else {
                mercadoriaQuantidade[i] = mercadoriaVenda.getQuantidade() + ".";
            }

        }
        String QuantidadeString = "";
        for (int i = mercadoriaQuantidade.length - 1; i >= 0; i--) {
            QuantidadeString = QuantidadeString + mercadoriaQuantidade[i];
        }

        return QuantidadeString;
    }

    public void pegarFun() {
        try {
            Connection con = FabricaDeConexoes.criarConexaoParaMySQL();
            FuncionarioDAO daoFuncionario = new FuncionarioDAO(con);
            List<Funcionario> funcionario = daoFuncionario.retrieveAll();

            for (int i = 0; i < funcionario.size(); i++) {

                jcbFuncionario.addItem(funcionario.get(i).getNome());

            }

        } catch (Exception e) {
        }
    }

    public void pegarData() {

        Date data = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        jftDataRetirada.setText(formato.format(data));
        jftDataRetirada.setEnabled(true);
        jftDataRetirada.setEditable(false);

        jftDataEntrega.setText(formato.format(data));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        lblDataRetirada = new javax.swing.JLabel();
        lblDataEntrega = new javax.swing.JLabel();
        jbFinalizarCondicional = new javax.swing.JButton();
        jbCancelarCondicional = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jcbFuncionario = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtObservacao = new javax.swing.JTextField();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jbBuscarClienteNome = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jbBuscarClienteID = new javax.swing.JButton();
        jbAlterarCliente = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCliente = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        lblMercadoria = new javax.swing.JLabel();
        txtMercadoria = new javax.swing.JTextField();
        jbPesquisarMercadoria = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtMercadoria = new javax.swing.JTable();
        jbMaisMercadoria = new javax.swing.JButton();
        jbAdicionarMercadoriTabela = new javax.swing.JButton();
        jbMenosMercadoria = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jftDataRetirada = new javax.swing.JFormattedTextField();
        jftDataEntrega = new javax.swing.JFormattedTextField();
        jbRemoverMercadoriaTabela = new javax.swing.JButton();

        setClosable(true);
        setTitle("Condicional");

        lblDataRetirada.setText("Data de retirada:");

        lblDataEntrega.setText("Data para entrega:");

        jbFinalizarCondicional.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tcc/mma/ifpr/img/bdConect.png"))); // NOI18N
        jbFinalizarCondicional.setText("Finalizar Condicional");
        jbFinalizarCondicional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinalizarCondicionalActionPerformed(evt);
            }
        });

        jbCancelarCondicional.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tcc/mma/ifpr/img/limpar.png"))); // NOI18N
        jbCancelarCondicional.setText("Limpar Condicional");
        jbCancelarCondicional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarCondicionalActionPerformed(evt);
            }
        });

        jLabel2.setText("Funcionário:");

        jLabel3.setText("Observação:");

        txtObservacao.setText("Sem Observações");
        txtObservacao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtObservacaoMouseClicked(evt);
            }
        });

        lblNome.setText("Cliente:");

        jbBuscarClienteNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tcc/mma/ifpr/img/buscar.png"))); // NOI18N
        jbBuscarClienteNome.setText("Buscar");
        jbBuscarClienteNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarClienteNomeActionPerformed(evt);
            }
        });

        lblID.setText("ID:");

        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        jbBuscarClienteID.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tcc/mma/ifpr/img/buscar.png"))); // NOI18N
        jbBuscarClienteID.setText("Buscar");
        jbBuscarClienteID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarClienteIDActionPerformed(evt);
            }
        });

        jbAlterarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tcc/mma/ifpr/img/alterar cliente.png"))); // NOI18N
        jbAlterarCliente.setText("Alterar Cliente");
        jbAlterarCliente.setEnabled(false);
        jbAlterarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarClienteActionPerformed(evt);
            }
        });

        jtCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF"
            }
        ));
        jtCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtCliente);

        jLabel4.setText("Quantidade:");

        txtQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQuantidadeFocusLost(evt);
            }
        });
        txtQuantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQuantidadeKeyTyped(evt);
            }
        });

        lblMercadoria.setText("Mercadoria:");

        txtMercadoria.setEditable(false);

        jbPesquisarMercadoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tcc/mma/ifpr/img/buscar.png"))); // NOI18N
        jbPesquisarMercadoria.setText("Buscar");
        jbPesquisarMercadoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarMercadoriaActionPerformed(evt);
            }
        });

        jtMercadoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Mercadoria", "Quantidade", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtMercadoria.getTableHeader().setReorderingAllowed(false);
        jtMercadoria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtMercadoriaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtMercadoria);

        jbMaisMercadoria.setText("+");
        jbMaisMercadoria.setEnabled(false);
        jbMaisMercadoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMaisMercadoriaActionPerformed(evt);
            }
        });

        jbAdicionarMercadoriTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tcc/mma/ifpr/img/mais.png"))); // NOI18N
        jbAdicionarMercadoriTabela.setText("Adicionar");
        jbAdicionarMercadoriTabela.setEnabled(false);
        jbAdicionarMercadoriTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarMercadoriTabelaActionPerformed(evt);
            }
        });

        jbMenosMercadoria.setText("-");
        jbMenosMercadoria.setEnabled(false);
        jbMenosMercadoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMenosMercadoriaActionPerformed(evt);
            }
        });

        jftDataRetirada.setEditable(false);
        try {
            jftDataRetirada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jftDataEntrega.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jbRemoverMercadoriaTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tcc/mma/ifpr/img/menos 1.png"))); // NOI18N
        jbRemoverMercadoriaTabela.setText("Remover");
        jbRemoverMercadoriaTabela.setEnabled(false);
        jbRemoverMercadoriaTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverMercadoriaTabelaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMercadoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMercadoria, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbPesquisarMercadoria)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbMaisMercadoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbMenosMercadoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jbAdicionarMercadoriTabela)
                        .addGap(18, 18, 18)
                        .addComponent(jbRemoverMercadoriaTabela)
                        .addGap(9, 9, 9))
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNome)
                        .addGap(18, 18, 18)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbBuscarClienteNome)
                        .addGap(18, 18, 18)
                        .addComponent(lblID)
                        .addGap(18, 18, 18)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbBuscarClienteID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAlterarCliente))
                    .addComponent(jSeparator4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jcbFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDataRetirada)
                                .addGap(18, 18, 18)
                                .addComponent(jftDataRetirada, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblDataEntrega)
                                .addGap(18, 18, 18)
                                .addComponent(jftDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbFinalizarCondicional)
                                .addGap(18, 18, 18)
                                .addComponent(jbCancelarCondicional)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbCancelarCondicional, jbFinalizarCondicional});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jftDataEntrega, jftDataRetirada});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscarClienteNome)
                    .addComponent(jbBuscarClienteID)
                    .addComponent(jbAlterarCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMercadoria)
                    .addComponent(txtMercadoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisarMercadoria)
                    .addComponent(jLabel4)
                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAdicionarMercadoriTabela)
                    .addComponent(jbMaisMercadoria)
                    .addComponent(jbMenosMercadoria)
                    .addComponent(jbRemoverMercadoriaTabela))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDataRetirada)
                    .addComponent(lblDataEntrega)
                    .addComponent(jftDataRetirada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbFinalizarCondicional)
                    .addComponent(jbCancelarCondicional))
                .addContainerGap())
        );

        setBounds(0, 0, 963, 685);
    }// </editor-fold>//GEN-END:initComponents

    private void jbFinalizarCondicionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinalizarCondicionalActionPerformed

        if (txtNome.getText().isEmpty() || txtObservacao.getText().isEmpty()
                || jftDataEntrega.getText().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Preencha todos os dados do formulário!", "Atenção", NORMAL);

        } else {

            try {
                Connection con = FabricaDeConexoes.criarConexaoParaMySQL();

                Date data = new Date();

                FuncionarioDAO daoFuncionario = new FuncionarioDAO(con);
                List<Funcionario> fun = daoFuncionario.retrieveNome(String.valueOf(jcbFuncionario.getSelectedItem()));
                Funcionario funcionario = new Funcionario();
                funcionario.setId(fun.get(0).getId());

                Cliente cliente = new Cliente();
                cliente.setId(Integer.parseInt(txtID.getText()));

                String mercadorias = fazerVetorMercadoria();

                String quantidades = fazerVetorQuantidade();
                String observacao = txtObservacao.getText();

                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

                Date dataRetirada = formato.parse(jftDataRetirada.getText());
                Date dataEntrega = formato.parse(jftDataEntrega.getText());

                CondicionalDAO daoCondicional = new CondicionalDAO(con);
                Condicional condicional = new Condicional(1, mercadorias, cliente, funcionario, quantidades, observacao, dataRetirada, dataEntrega, 1);
                daoCondicional.create(condicional);

                JOptionPane.showMessageDialog(null, "Condicional realizada com sucesso!");

                AcaoCondicional vendaa = new AcaoCondicional();
                getParent().add(vendaa);
                vendaa.setVisible(true);
                this.setVisible(false);

            } catch (Exception e) {

                AcaoCondicional vendaa = new AcaoCondicional();

                getParent().add(vendaa);
                vendaa.setVisible(true);
                this.setVisible(false);

                JOptionPane.showMessageDialog(null, "A condicional não foi realizada com sucesso!", "Atenção", NORMAL);
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jbFinalizarCondicionalActionPerformed

    private void jbCancelarCondicionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarCondicionalActionPerformed

        AcaoCondicional vendaa = new AcaoCondicional();

        getParent().add(vendaa);
        vendaa.setVisible(true);
        this.setVisible(false);

// TODO add your handling code here:
    }//GEN-LAST:event_jbCancelarCondicionalActionPerformed

    private void jbBuscarClienteNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarClienteNomeActionPerformed

        if (txtNome.getText().isEmpty() || txtNome.getText().equals(null)) {

            String cliente = txtNome.getText();

            try {

                Connection con = FabricaDeConexoes.criarConexaoParaMySQL();
                ClienteDAO daoCliente = new ClienteDAO(con);
                List<Cliente> cli = daoCliente.retrieveAll();

                TableModelCliente tableModelCliente = new TableModelCliente();

                jtCliente.setModel(tableModelCliente);

                for (int i = 0; i < cli.size(); i++) {

                    Cliente clientes = new Cliente();

                    clientes.setId(cli.get(i).getId());
                    clientes.setNome(cli.get(i).getNome());
                    clientes.setCpf(cli.get(i).getCpf());
                    tableModelCliente.addRow(clientes);

                }

            } catch (Exception e) {
            }

        } else {

            String cliente = txtNome.getText();

            try {

                Connection con = FabricaDeConexoes.criarConexaoParaMySQL();
                ClienteDAO daoCliente = new ClienteDAO(con);
                List<Cliente> cli = daoCliente.retrieveNome(cliente);

                TableModelCliente tableModelCliente = new TableModelCliente();

                jtCliente.setModel(tableModelCliente);

                for (int i = 0; i < cli.size(); i++) {

                    Cliente clientes = new Cliente();

                    clientes.setId(cli.get(i).getId());
                    clientes.setNome(cli.get(i).getNome());
                    clientes.setCpf(cli.get(i).getCpf());
                    tableModelCliente.addRow(clientes);

                }

                txtNome.setText(null);

            } catch (Exception e) {
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jbBuscarClienteNomeActionPerformed

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped

        String caracteres = "0987654321";
        if (!caracteres.contains(evt.getKeyChar() + "")) {
            evt.consume();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDKeyTyped

    private void jbBuscarClienteIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarClienteIDActionPerformed

        if (txtID.getText().isEmpty() || txtID.getText().equals(null)) {

            try {

                Connection con = FabricaDeConexoes.criarConexaoParaMySQL();
                ClienteDAO daoCliente = new ClienteDAO(con);
                List<Cliente> cli = daoCliente.retrieveAll();

                TableModelCliente tableModelCliente = new TableModelCliente();

                jtCliente.setModel(tableModelCliente);

                for (int i = 0; i < cli.size(); i++) {

                    Cliente clientes = new Cliente();

                    clientes.setId(cli.get(i).getId());
                    clientes.setNome(cli.get(i).getNome());
                    clientes.setCpf(cli.get(i).getCpf());
                    tableModelCliente.addRow(clientes);

                }

            } catch (Exception e) {
            }

        } else {

            String cliente = txtID.getText();

            try {

                Connection con = FabricaDeConexoes.criarConexaoParaMySQL();
                ClienteDAO daoCliente = new ClienteDAO(con);
                Cliente cli = daoCliente.retrieve(Integer.parseInt(cliente));

                TableModelCliente tableModelCliente = new TableModelCliente();

                jtCliente.setModel(tableModelCliente);

                Cliente clientes = new Cliente();

                clientes.setId(cli.getId());
                clientes.setNome(cli.getNome());
                clientes.setCpf(cli.getCpf());
                tableModelCliente.addRow(clientes);

                txtID.setText(null);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Não foi possível Localizar o cliente com ID: " + txtID.getText(), "Atencão", NORMAL);
                txtID.setText(null);
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jbBuscarClienteIDActionPerformed

    private void jbAlterarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarClienteActionPerformed

        jbBuscarClienteID.setEnabled(true);
        jbBuscarClienteNome.setEnabled(true);
        jbAlterarCliente.setEnabled(false);
        txtID.setEditable(true);
        txtNome.setEditable(true);
        txtID.setText(null);
        txtNome.setText(null);

        // TODO add your handling code here:
    }//GEN-LAST:event_jbAlterarClienteActionPerformed

    private void jtClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtClienteMouseClicked

        int linhaSelecionada = jtCliente.getSelectedRow();

        if (linhaSelecionada != -1) {
            TableModelCliente tbCliente = (TableModelCliente) jtCliente.getModel();
            Cliente cliente = tbCliente.getCliente(jtCliente.getSelectedRow());

            try {
                Connection con = FabricaDeConexoes.criarConexaoParaMySQL();
                ClienteDAO daoCliente = new ClienteDAO(con);
                Cliente clienteR = daoCliente.retrieve(cliente.getId());

                txtID.setText(String.valueOf(clienteR.getId()));
                txtNome.setText(clienteR.getNome());

            } catch (Exception e) {
            }
            jbBuscarClienteID.setEnabled(false);
            jbBuscarClienteNome.setEnabled(false);
            jbAlterarCliente.setEnabled(true);
            txtID.setEditable(false);
            txtNome.setEditable(false);

            int linhas = jtCliente.getRowCount();
            for (int i = linhas - 1; i >= 0; i--) {

                tbCliente.removeLinha(i);

            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jtClienteMouseClicked

    private void txtQuantidadeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantidadeKeyTyped

        String caracteres = "0987654321";
        if (!caracteres.contains(evt.getKeyChar() + "")) {
            evt.consume();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantidadeKeyTyped

    private void jbPesquisarMercadoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarMercadoriaActionPerformed

        AcaoAdicionarMercadoriaCondicional mercadoriaAdd = new AcaoAdicionarMercadoriaCondicional();

        Main main = new Main();

        getParent().add(mercadoriaAdd);

        mercadoriaAdd.setVisible(true);

        int lDesk = getParent().getWidth();
        int aDesk = getParent().getHeight();
        int lIFrame = mercadoriaAdd.getWidth();
        int aIFrame = mercadoriaAdd.getHeight();

        mercadoriaAdd.setLocation(lDesk / 2 - lIFrame / 2, aDesk / 2 - aIFrame / 2);

        // TODO add your handling code here:
    }//GEN-LAST:event_jbPesquisarMercadoriaActionPerformed

    private void jtMercadoriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtMercadoriaMouseClicked
jbRemoverMercadoriaTabela.setEnabled(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jtMercadoriaMouseClicked

    private void jbMaisMercadoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMaisMercadoriaActionPerformed

        int conta = Integer.parseInt(txtQuantidade.getText()) + 1;

        String quantidade = String.valueOf(conta);

        txtQuantidade.setText(quantidade);

        // TODO add your handling code here:
    }//GEN-LAST:event_jbMaisMercadoriaActionPerformed

    private void jbAdicionarMercadoriTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarMercadoriTabelaActionPerformed

        try {
            Connection con = FabricaDeConexoes.criarConexaoParaMySQL();
            MercadoriaDAO daoMercadoria = new MercadoriaDAO(con);
            Mercadoria mer = daoMercadoria.retrieve(idMercadoria);

            int quantidadeEstoque = mer.getQuantide();

            if (Integer.parseInt(txtQuantidade.getText()) > quantidadeEstoque) {
                if (JOptionPane.showConfirmDialog(null, "A quantidade disponível em estoque de "
                        + "'" + mer.getDescricao() + "' é de: " + mer.getQuantide() + "\n"
                        + "Você Deseja fazer a condicional somente com as " + mer.getQuantide() + " restantes?", "Atenção!",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                    txtQuantidade.setText(String.valueOf(mer.getQuantide()));

                    if (jtMercadoria.getRowCount() == 0) {

                        TableModelMercadoriaVenda tableModelMercadoriaVenda = new TableModelMercadoriaVenda();
                        jtMercadoria.setModel(tableModelMercadoriaVenda);

                        MercadoriaVenda mercadorias = new MercadoriaVenda();
                        mercadorias.setId(mer.getId());
                        mercadorias.setDescricao(mer.getDescricao());
                        mercadorias.setQuantidade(Integer.parseInt(txtQuantidade.getText()));

                        double valor_Venda = Double.valueOf(mer.getValor_venda()) * Integer.parseInt(txtQuantidade.getText());

                        mercadorias.setValor_venda("R$ " + String.valueOf(valor_Venda));
                        tableModelMercadoriaVenda.addRow(mercadorias);

                        idMercadoria = 0;
                        txtMercadoria.setText(null);
                        txtQuantidade.setText("");
                        jbMaisMercadoria.setEnabled(false);
                        jbMenosMercadoria.setEnabled(false);
                        jbAdicionarMercadoriTabela.setEnabled(false);

                    } else {
                        TableModelMercadoriaVenda tableModelMercadoriaVenda = (TableModelMercadoriaVenda) jtMercadoria.getModel();
                        jtMercadoria.setModel(tableModelMercadoriaVenda);

                        MercadoriaVenda mercadorias = new MercadoriaVenda();
                        mercadorias.setId(mer.getId());
                        mercadorias.setDescricao(mer.getDescricao());
                        mercadorias.setQuantidade(Integer.parseInt(txtQuantidade.getText()));
                        double valor_Venda = Double.valueOf(mer.getValor_venda()) * Integer.parseInt(txtQuantidade.getText());
                        mercadorias.setValor_venda("R$ " + String.valueOf(valor_Venda));
                        tableModelMercadoriaVenda.addRow(mercadorias);

                        idMercadoria = 0;
                        txtMercadoria.setText(null);
                        txtQuantidade.setText("");
                        jbMaisMercadoria.setEnabled(false);
                        jbMenosMercadoria.setEnabled(false);
                        jbAdicionarMercadoriTabela.setEnabled(false);

                    }

                } else {
                    txtQuantidade.setText("1");
                }
            } else {

                if (jtMercadoria.getRowCount() == 0) {
                    TableModelMercadoriaVenda tableModelMercadoriaVenda = new TableModelMercadoriaVenda();
                    jtMercadoria.setModel(tableModelMercadoriaVenda);

                    MercadoriaVenda mercadorias = new MercadoriaVenda();
                    mercadorias.setId(mer.getId());
                    mercadorias.setDescricao(mer.getDescricao());
                    mercadorias.setQuantidade(Integer.parseInt(txtQuantidade.getText()));
                    double valor_Venda = Double.valueOf(mer.getValor_venda()) * Integer.parseInt(txtQuantidade.getText());
                    mercadorias.setValor_venda("R$ " + String.valueOf(valor_Venda));
                    tableModelMercadoriaVenda.addRow(mercadorias);

                    idMercadoria = 0;
                    txtMercadoria.setText(null);
                    txtQuantidade.setText("");
                    jbMaisMercadoria.setEnabled(false);
                    jbMenosMercadoria.setEnabled(false);
                    jbAdicionarMercadoriTabela.setEnabled(false);

                } else {
                    TableModelMercadoriaVenda tableModelMercadoriaVenda = (TableModelMercadoriaVenda) jtMercadoria.getModel();
                    jtMercadoria.setModel(tableModelMercadoriaVenda);

                    MercadoriaVenda mercadorias = new MercadoriaVenda();
                    mercadorias.setId(mer.getId());
                    mercadorias.setDescricao(mer.getDescricao());
                    mercadorias.setQuantidade(Integer.parseInt(txtQuantidade.getText()));
                    double valor_Venda = Double.valueOf(mer.getValor_venda()) * Integer.parseInt(txtQuantidade.getText());
                    mercadorias.setValor_venda("R$ " + String.valueOf(valor_Venda));
                    tableModelMercadoriaVenda.addRow(mercadorias);

                    idMercadoria = 0;
                    txtMercadoria.setText(null);
                    txtQuantidade.setText("");
                    jbMaisMercadoria.setEnabled(false);
                    jbMenosMercadoria.setEnabled(false);
                    jbAdicionarMercadoriTabela.setEnabled(false);

                }
            }
        } catch (Exception e) {

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jbAdicionarMercadoriTabelaActionPerformed

    private void jbMenosMercadoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMenosMercadoriaActionPerformed

        if (Integer.parseInt(txtQuantidade.getText()) <= 1) {
            JOptionPane.showMessageDialog(null, "A quantidade não pode ser inferior a 1ª unidade", "Atenção", NORMAL);
            txtQuantidade.setText("1");
        } else {

            int conta = Integer.parseInt(txtQuantidade.getText()) - 1;

            String quantidade = String.valueOf(conta);

            txtQuantidade.setText(quantidade);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jbMenosMercadoriaActionPerformed

    private void txtObservacaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtObservacaoMouseClicked

        txtObservacao.setText(null);
        // TODO add your handling code here:
    }//GEN-LAST:event_txtObservacaoMouseClicked

    private void txtQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantidadeFocusLost

        if (Integer.parseInt(txtQuantidade.getText()) == 0) {
            txtQuantidade.setText("1");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_txtQuantidadeFocusLost

    private void jbRemoverMercadoriaTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverMercadoriaTabelaActionPerformed
        int linhaSelecionada = jtMercadoria.getSelectedRow();
        if (JOptionPane.showConfirmDialog(null, "Você realmente deseja retirar a mercadoria da tabela? ", "Atenção!",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

            if (linhaSelecionada != -1) {
                TableModelMercadoriaVenda model = (TableModelMercadoriaVenda) jtMercadoria.getModel();

                MercadoriaVenda mercadorias = model.getMercadoria(linhaSelecionada);

                model.removeLinha(linhaSelecionada);

            }

            jbRemoverMercadoriaTabela.setEnabled(false);
        } else {
            jbRemoverMercadoriaTabela.setEnabled(false);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jbRemoverMercadoriaTabelaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton jbAdicionarMercadoriTabela;
    private javax.swing.JButton jbAlterarCliente;
    private javax.swing.JButton jbBuscarClienteID;
    private javax.swing.JButton jbBuscarClienteNome;
    private javax.swing.JButton jbCancelarCondicional;
    private javax.swing.JButton jbFinalizarCondicional;
    private javax.swing.JButton jbMaisMercadoria;
    private javax.swing.JButton jbMenosMercadoria;
    private javax.swing.JButton jbPesquisarMercadoria;
    private javax.swing.JButton jbRemoverMercadoriaTabela;
    private javax.swing.JComboBox<String> jcbFuncionario;
    private javax.swing.JFormattedTextField jftDataEntrega;
    private javax.swing.JFormattedTextField jftDataRetirada;
    private javax.swing.JTable jtCliente;
    private javax.swing.JTable jtMercadoria;
    private javax.swing.JLabel lblDataEntrega;
    private javax.swing.JLabel lblDataRetirada;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblMercadoria;
    private javax.swing.JLabel lblNome;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtMercadoria;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtObservacao;
    private javax.swing.JTextField txtQuantidade;
    // End of variables declaration//GEN-END:variables
}
